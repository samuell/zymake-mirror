(*****************************************************************************
 * Copyright (c) 2008, Eric Breck
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1 Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * 
 * 2 Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 * 
 * 3 The name of the author may not be used to endorse or promote products
 *   derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *****************************************************************************)
# 1 "lexer.mll"
 
  open Parser
  open Types
  open Lexing
  open Printf
  exception InvalidChar of char * string

  (** set up the lexbuf to allow error reporting *)
  let init_lexbuf fn lexbuf =
    let p = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- {p with
    pos_fname = fn;
    pos_lnum = 1;
    pos_bol = 0}

  let count_newlines s = 
    let n = ref 0 in
    let last_newline = ref (String.length s) in
    for i = 0 to String.length s - 1 do
      if s.[i] = '\n' then begin
        incr n;
        last_newline := i
      end
    done;
    !n,(String.length s - !last_newline)

  (** we observed a newline, so we need to update the line number and
     the numchars-at-beginning-of-line counts.

     s is the pattern triggering this; if it's not passed in, it's assumed:
     (a) to END in a newline (the last character of s is \n)
     (b) to contain EXACTLY ONE newline
   *)
  let ln ?s lexbuf = 
    let num_newlines, chars_since_newline = match s with
    | None -> 1, 0
    | Some s -> count_newlines s in
    if num_newlines > 0 then
      let p = lexbuf.lex_curr_p in
      lexbuf.lex_curr_p <- {p with 
        pos_lnum = p.pos_lnum + num_newlines;
        pos_bol = p.pos_cnum - chars_since_newline}

  type lexer = state -> Lexing.lexbuf -> Parser.token
  and state = {mutable top:lexer; mutable stack: lexer list; 
    mutable last_is_rangle:bool }

  exception InvalidStatePop

  (** wrap a lexer function so that I can remember which function I'm using *)
  let stateful_lex state lexbuf = state.top state lexbuf

  let pop state = 
    match state.stack with
    | [] -> raise InvalidStatePop
    | h::t ->
        state.top <- h;
        state.stack <- t

  let push state f = 
    state.stack <- state.top :: state.stack;
    state.top <- f

  let set state ?(rangle=Some false) f = 
    state.top <- f;
    (match rangle with None -> () | Some b -> state.last_is_rangle <- b)


# 71 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\245\255\246\255\002\000\000\000\251\255\114\000\007\000\
    \004\000\009\000\011\000\255\255\013\000\015\000\016\000\020\000\
    \018\000\116\000\002\000\002\000\250\255\228\000\247\255\230\000\
    \004\000\253\255\255\255\021\000\119\000\035\000\006\000\006\000\
    \252\255\018\001\239\255\240\255\241\255\085\000\196\000\096\001\
    \244\255\002\000\041\000\019\000\021\000\254\255\039\000\046\000\
    \210\001\032\002\110\002\188\002\046\003\248\255\183\001\193\001\
    \124\003\023\000\024\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\007\000\008\000\255\255\007\000\001\000\
    \011\000\003\000\011\000\255\255\255\255\255\255\255\255\255\255\
    \002\000\255\255\006\000\255\255\255\255\255\255\255\255\005\000\
    \006\000\255\255\255\255\009\000\001\000\255\255\004\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\013\000\015\000\012\000\
    \255\255\007\000\015\000\015\000\255\255\255\255\255\255\255\255\
    \255\255\006\000\255\255\000\000\255\255\255\255\006\000\008\000\
    \005\000\008\000\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\003\000\255\255\000\000\003\000\255\255\
    \255\255\255\255\013\000\000\000\255\255\013\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\023\000\000\000\023\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\035\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\047\000\044\000\044\000\000\000\255\255\047\000\
    \255\255\255\255\025\000\255\255\022\000\000\000\255\255\255\255\
    \255\255\058\000\058\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\009\000\007\000\255\255\255\255\008\000\007\000\255\255\
    \015\000\007\000\009\000\007\000\014\000\011\000\014\000\011\000\
    \012\000\011\000\007\000\016\000\012\000\015\000\007\000\026\000\
    \009\000\014\000\255\255\010\000\004\000\255\255\255\255\015\000\
    \018\000\009\000\019\000\020\000\030\000\026\000\031\000\032\000\
    \048\000\045\000\016\000\045\000\015\000\026\000\046\000\026\000\
    \045\000\026\000\026\000\046\000\000\000\002\000\005\000\255\255\
    \255\255\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\000\000\000\000\000\000\000\000\006\000\
    \000\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\017\000\255\255\017\000\000\000\255\255\
    \028\000\026\000\000\000\000\000\029\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\000\000\
    \000\000\000\000\017\000\000\000\017\000\255\255\255\255\028\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \000\000\000\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\000\000\000\000\000\000\016\000\
    \255\255\016\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\000\000\000\000\000\000\
    \000\000\006\000\000\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\028\000\026\000\255\255\
    \255\255\027\000\000\000\255\255\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\028\000\000\000\255\255\000\000\
    \024\000\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000\255\255\000\000\255\255\
    \255\255\000\000\000\000\025\000\032\000\000\000\000\000\025\000\
    \000\000\000\000\025\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\025\000\000\000\043\000\042\000\000\000\000\000\
    \000\000\036\000\022\000\041\000\040\000\000\000\000\000\038\000\
    \000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\000\000\020\000\001\000\005\000\
    \002\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\039\000\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\000\000\000\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\000\000\000\000\039\000\
    \000\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\022\000\000\000\255\255\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\054\000\054\000\000\000\000\000\000\000\000\000\049\000\
    \000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\000\000\000\000\000\000\
    \000\000\049\000\000\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\000\000\000\000\000\000\000\000\049\000\
    \000\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\051\000\000\000\000\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\000\000\000\000\000\000\000\000\051\000\000\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\000\000\000\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\000\000\
    \000\000\000\000\000\000\051\000\000\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\045\000\
    \025\000\000\000\000\000\045\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\000\
    \057\000\000\000\000\000\000\000\000\000\053\000\005\000\032\000\
    \000\000\000\000\000\000\055\000\000\000\000\000\054\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\045\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\000\000\000\000\000\000\000\000\056\000\000\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\000\000\000\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
    \000\000\000\000\000\000\056\000\000\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\003\000\000\000\008\000\003\000\
    \007\000\007\000\009\000\009\000\007\000\010\000\009\000\012\000\
    \010\000\013\000\014\000\016\000\013\000\015\000\015\000\027\000\
    \000\000\015\000\003\000\000\000\000\000\003\000\003\000\007\000\
    \004\000\009\000\018\000\019\000\024\000\029\000\030\000\031\000\
    \041\000\046\000\016\000\042\000\015\000\043\000\042\000\044\000\
    \047\000\057\000\058\000\047\000\255\255\000\000\000\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\006\000\017\000\255\255\006\000\
    \028\000\028\000\255\255\255\255\028\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\037\000\037\000\037\000\255\255\
    \255\255\255\255\006\000\255\255\017\000\006\000\006\000\028\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\006\000\
    \255\255\255\255\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\255\255\255\255\255\255\006\000\
    \006\000\017\000\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\255\255\255\255\255\255\
    \255\255\006\000\255\255\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\021\000\021\000\023\000\
    \023\000\021\000\255\255\023\000\038\000\038\000\038\000\038\000\
    \038\000\038\000\038\000\038\000\038\000\038\000\255\255\255\255\
    \000\000\255\255\003\000\255\255\021\000\255\255\023\000\255\255\
    \021\000\255\255\023\000\010\000\255\255\255\255\255\255\013\000\
    \255\255\255\255\255\255\043\000\255\255\044\000\255\255\057\000\
    \058\000\255\255\255\255\033\000\033\000\255\255\255\255\033\000\
    \255\255\255\255\021\000\255\255\023\000\255\255\255\255\255\255\
    \255\255\042\000\255\255\255\255\255\255\255\255\047\000\255\255\
    \255\255\255\255\033\000\255\255\033\000\033\000\255\255\255\255\
    \255\255\033\000\033\000\033\000\033\000\255\255\255\255\033\000\
    \255\255\255\255\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\255\255\033\000\033\000\033\000\
    \033\000\255\255\255\255\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\255\255\255\255\255\255\
    \255\255\033\000\006\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\039\000\255\255\255\255\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\255\255\255\255\255\255\255\255\039\000\
    \255\255\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\021\000\255\255\023\000\054\000\
    \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
    \054\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
    \055\000\055\000\055\000\255\255\255\255\255\255\255\255\048\000\
    \255\255\255\255\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\033\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\255\255\255\255\255\255\
    \255\255\048\000\255\255\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
    \048\000\048\000\048\000\048\000\048\000\049\000\255\255\255\255\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\255\255\255\255\255\255\255\255\049\000\
    \255\255\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
    \049\000\049\000\049\000\050\000\255\255\255\255\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\255\255\255\255\255\255\255\255\050\000\255\255\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
    \050\000\051\000\255\255\255\255\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\255\255\
    \255\255\255\255\255\255\051\000\255\255\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
    \051\000\051\000\051\000\051\000\051\000\051\000\051\000\052\000\
    \052\000\255\255\255\255\052\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\052\000\255\255\
    \052\000\255\255\255\255\255\255\255\255\052\000\052\000\052\000\
    \255\255\255\255\255\255\052\000\255\255\255\255\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\050\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\255\255\255\255\255\255\255\255\052\000\255\255\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
    \052\000\056\000\255\255\255\255\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\255\255\
    \255\255\255\255\255\255\056\000\255\255\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
    \056\000\056\000\056\000\056\000\056\000\056\000\056\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\052\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\078\000\000\000\
    \000\000\000\000\000\000\007\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_backtrk_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_default_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\001\000\000\000\000\000\001\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_trans_code = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\000\000\000\000\000\000\000\000\004\000\
    \000\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\000\000\000\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\004\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check_code = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\010\000\013\000\255\255\010\000\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\006\000\255\255\255\255\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\255\255\255\255\255\255\255\255\006\000\255\255\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \010\000\013\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_code = 
   "\255\002\255\255\001\255\255\000\002\255\000\001\255";
}

let rec start_of_line state lexbuf =
  lexbuf.Lexing.lex_mem <- Array.create 3 (-1) ;   __ocaml_lex_start_of_line_rec state lexbuf 0
and __ocaml_lex_start_of_line_rec state lexbuf __ocaml_lex_state =
  match Lexing.new_engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let s = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_mem.(0) in
# 75 "lexer.mll"
                                  (set state start_of_line; ln lexbuf; COMMENT s)
# 516 "lexer.ml"

  | 1 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 76 "lexer.mll"
                              (set state start_of_line; ln ~s lexbuf; BLANK)
# 523 "lexer.ml"

  | 2 ->

  let id = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_mem.(0) in
# 77 "lexer.mll"
                                               (set state content_of_line; DEF id)
# 530 "lexer.ml"

  | 3 ->
# 78 "lexer.mll"
             (set state ~rangle:None content_of_line; 
content_of_line state lexbuf)
# 536 "lexer.ml"

  | 4 ->
# 82 "lexer.mll"
      (set state ~rangle:(Some true) content_of_line; STR ">")
# 541 "lexer.ml"

  | 5 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 83 "lexer.mll"
                 (set state content_of_line; STR s)
# 548 "lexer.ml"

  | 6 ->
# 84 "lexer.mll"
       (set state ~rangle:None content_of_line; push state in_interpolation; 
(if state.last_is_rangle then RANGLE_OPAREN else OPAREN))
# 554 "lexer.ml"

  | 7 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 86 "lexer.mll"
                                                (set state content_of_line; STR s)
# 561 "lexer.ml"

  | 8 ->
# 87 "lexer.mll"
      (set state content_of_line; STR "$")
# 566 "lexer.ml"

  | 9 ->
# 88 "lexer.mll"
      (set state content_of_line; STR "=")
# 571 "lexer.ml"

  | 10 ->
# 89 "lexer.mll"
      (EOF)
# 576 "lexer.ml"

  | 11 ->

  let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 90 "lexer.mll"
         (raise (InvalidChar (c,"at the start of a line (report this as a bug)")))
# 583 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_of_line_rec state lexbuf __ocaml_lex_state

and content_of_line state lexbuf =
    __ocaml_lex_content_of_line_rec state lexbuf 21
and __ocaml_lex_content_of_line_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 93 "lexer.mll"
                     (ln lexbuf; set state ~rangle:None start_of_line; EOL)
# 594 "lexer.ml"

  | 1 ->
# 94 "lexer.mll"
             (set state ~rangle:None content_of_line; SPC)
# 599 "lexer.ml"

  | 2 ->
# 95 "lexer.mll"
      (set state ~rangle:(Some true) content_of_line; STR ">")
# 604 "lexer.ml"

  | 3 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos (lexbuf.Lexing.lex_start_pos + 2) in
# 96 "lexer.mll"
                 (set state content_of_line; STR s)
# 611 "lexer.ml"

  | 4 ->
# 97 "lexer.mll"
       (set state ~rangle:None content_of_line; push state in_interpolation;
(if state.last_is_rangle then RANGLE_OPAREN else OPAREN))
# 617 "lexer.ml"

  | 5 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 99 "lexer.mll"
                                        (set state content_of_line; STR s)
# 624 "lexer.ml"

  | 6 ->
# 100 "lexer.mll"
      (set state content_of_line; STR "$")
# 629 "lexer.ml"

  | 7 ->
# 101 "lexer.mll"
      (set state content_of_line; STR "=")
# 634 "lexer.ml"

  | 8 ->
# 102 "lexer.mll"
      (EOF)
# 639 "lexer.ml"

  | 9 ->

  let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 103 "lexer.mll"
         (raise (InvalidChar (c,"within a line (report this as a bug)")))
# 646 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_content_of_line_rec state lexbuf __ocaml_lex_state

and in_interpolation state lexbuf =
    __ocaml_lex_in_interpolation_rec state lexbuf 33
and __ocaml_lex_in_interpolation_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let s = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 106 "lexer.mll"
                           (ln ~s lexbuf; (* strings can contain \n *) STR s)
# 659 "lexer.ml"

  | 1 ->
# 107 "lexer.mll"
                          (ln lexbuf; in_interpolation state lexbuf (* allow comments in interp *))
# 664 "lexer.ml"

  | 2 ->
# 108 "lexer.mll"
                  (in_interpolation state lexbuf)
# 669 "lexer.ml"

  | 3 ->
# 109 "lexer.mll"
         (ln lexbuf; in_interpolation state lexbuf)
# 674 "lexer.ml"

  | 4 ->
# 110 "lexer.mll"
      (EQUALS)
# 679 "lexer.ml"

  | 5 ->
# 111 "lexer.mll"
      (SEMI)
# 684 "lexer.ml"

  | 6 ->

  let suffix = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 113 "lexer.mll"
      (pop state; (SUFFIX suffix))
# 691 "lexer.ml"

  | 7 ->
# 114 "lexer.mll"
      (pop state;CLOPAREN)
# 696 "lexer.ml"

  | 8 ->
# 115 "lexer.mll"
      (push state in_interpolation; OPAREN)
# 701 "lexer.ml"

  | 9 ->
# 116 "lexer.mll"
      (RANGLE)
# 706 "lexer.ml"

  | 10 ->
# 117 "lexer.mll"
      (LANGLE)
# 711 "lexer.ml"

  | 11 ->
# 118 "lexer.mll"
      (AST)
# 716 "lexer.ml"

  | 12 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 119 "lexer.mll"
          (ID s)
# 723 "lexer.ml"

  | 13 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 120 "lexer.mll"
                         (INT (int_of_string s))
# 730 "lexer.ml"

  | 14 ->
# 121 "lexer.mll"
       (QUOTE)
# 735 "lexer.ml"

  | 15 ->

  let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 122 "lexer.mll"
         (raise (InvalidChar (c,"in interpolations (between $(...))")))
# 742 "lexer.ml"

  | 16 ->
# 123 "lexer.mll"
      (EOF)
# 747 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_in_interpolation_rec state lexbuf __ocaml_lex_state

and start_dictionary_line state lexbuf =
    __ocaml_lex_start_dictionary_line_rec state lexbuf 50
and __ocaml_lex_start_dictionary_line_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 129 "lexer.mll"
                                            (set state in_dictionary_line; ID s)
# 760 "lexer.ml"

  | 1 ->
# 130 "lexer.mll"
      (EOF)
# 765 "lexer.ml"

  | 2 ->

  let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 131 "lexer.mll"
         (raise (InvalidChar (c,"at start of dictionary line")))
# 772 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_start_dictionary_line_rec state lexbuf __ocaml_lex_state

and in_dictionary_line state lexbuf =
    __ocaml_lex_in_dictionary_line_rec state lexbuf 52
and __ocaml_lex_in_dictionary_line_rec state lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->

  let s = Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 136 "lexer.mll"
                           (ln ~s lexbuf; (* strings can contain \n *) STR s)
# 785 "lexer.ml"

  | 1 ->
# 137 "lexer.mll"
                  (in_dictionary_line state lexbuf)
# 790 "lexer.ml"

  | 2 ->
# 138 "lexer.mll"
         (ln lexbuf; set state start_dictionary_line; EOL)
# 795 "lexer.ml"

  | 3 ->
# 139 "lexer.mll"
      (CLOPAREN)
# 800 "lexer.ml"

  | 4 ->
# 140 "lexer.mll"
      (OPAREN)
# 805 "lexer.ml"

  | 5 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 141 "lexer.mll"
          (ID s)
# 812 "lexer.ml"

  | 6 ->

  let s = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 142 "lexer.mll"
                          (INT (int_of_string s))
# 819 "lexer.ml"

  | 7 ->
# 143 "lexer.mll"
       (QUOTE)
# 824 "lexer.ml"

  | 8 ->

  let c = Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 144 "lexer.mll"
         (raise (InvalidChar (c,"in expressions in dictionary file")))
# 831 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_in_dictionary_line_rec state lexbuf __ocaml_lex_state

;;

# 146 "lexer.mll"
 

let parse fn lexbuf grammar lexer_start =
  init_lexbuf fn lexbuf;
  try
    grammar (stateful_lex ({top=lexer_start; stack=[];
    last_is_rangle=false})) lexbuf 
  with e ->
    let p = lexeme_start_p lexbuf in
    eprintf "Error in file %s, line %d, column %d: " 
    p.pos_fname p.pos_lnum (p.pos_cnum - p.pos_bol);
    match e with
    | InvalidChar (c,s) -> eprintf "character %c not allowed %s\n" c s; exit 1
    | Parsing.Parse_error -> eprintf "syntax error\n"; exit 1
    | InvalidStatePop -> eprintf "invalid lexer state pop\n"; exit 1
    | e -> eprintf "\n"; raise e

let parse_file fn grammar lexer_start =
  let f = open_in fn in
  let lexbuf = from_channel f in
  let ret = parse fn lexbuf grammar lexer_start in
  close_in f;
  ret

# 862 "lexer.ml"
